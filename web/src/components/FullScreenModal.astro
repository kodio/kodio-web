---
export type Props = {
  id: string;
  label: string;
  openButtonId: string;
  closeButtonId: string;
};

const { id, label, openButtonId, closeButtonId } = Astro.props;
---

<div id={id} role="dialog" aria-label={label}>
  <slot />
</div>

<script define:vars={{ id, openButtonId, closeButtonId }}>
  const modal = document.getElementById(id);
  const openModalButton = document.getElementById(openButtonId);
  const closeModalButton = modal?.querySelector(`#${closeButtonId}`);

  function getKeyboardFocusableElements(element) {
    return [
      ...element.querySelectorAll(
        'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])',
      ),
    ].filter((el) => !el.hasAttribute('disabled'));
  }

  function trapFocus(event) {
    if (!modal) return;

    const focusableElements = getKeyboardFocusableElements(modal);
    const firstFocusableElement = focusableElements[0];
    const lastFocusableElement = focusableElements[focusableElements.length - 1];

    if (!event.shiftKey && document.activeElement === lastFocusableElement) {
      event.preventDefault();
      firstFocusableElement?.focus();
    }

    if (event.shiftKey && document.activeElement === firstFocusableElement) {
      event.preventDefault();
      lastFocusableElement?.focus();
    }
  }

  function handleKeyPress(event) {
    if (event.key === 'Escape') {
      closeModal();
    } else if (event.key === 'Tab') {
      trapFocus(event);
    }
  }

  function openModal() {
    modal?.classList.add('show');
    document.body.style.overflow = 'hidden';
    document.addEventListener('keydown', handleKeyPress);
  }

  function closeModal() {
    modal?.classList.remove('show');
    document.body.style.overflow = '';
    openModalButton?.focus({ preventScroll: true });
    document.removeEventListener('keydown', handleKeyPress);
  }

  openModalButton?.addEventListener('click', openModal);
  closeModalButton?.addEventListener('click', closeModal);
</script>

<style lang="scss">
  body.fullscreen-modal-is-active {
    overflow: hidden;
  }

  div {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 100vw;
    right: -100vw;
    background-color: var(--white);
    z-index: 1;
    visibility: hidden;
    transition:
      visibility 0s ease-in-out 0.3s,
      translate 0.3s ease-in-out;

    &.show {
      transition-delay: 0s;
      translate: -100%;
      visibility: visible;
    }
  }
</style>
