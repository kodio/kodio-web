---
import { urlFor } from '@lib/sanity';
import type { Image, ImageObj } from '@lib/sanity';

export type Props = {
  image: Image | ImageObj;
  class?: string;
  sizes?: string;
  loading?: 'lazy' | 'eager';
  aspectRatio?: number | 'intrinsic';
  objectFit?: 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
};

const {
  image,
  sizes = '100vw',
  loading = 'lazy',
  aspectRatio: aspectRatioProp = 'intrinsic',
  objectFit = 'contain',
} = Astro.props;

const widths = [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840];

const urlBuilder = urlFor(image).auto('format').fit('clip').quality(75);

const srcset = widths.map((width) => `${urlBuilder.width(width).url()} ${width}w`).join(', ');

const src = urlBuilder.url();

function getAspectRatioForImage(img: Image | ImageObj) {
  const ref = img.asset?._ref;
  const dimensions = ref?.split('-')[2] ?? '';
  const [width, height] = dimensions?.split('x').map((d) => parseInt(d, 10));

  if (!width || !height) return 1;

  const crop = img.crop;

  if (crop) {
    const croppedWidth = width * (1 - (crop.left + crop.right));
    const croppedHeight = height * (1 - (crop.top + crop.bottom));

    return croppedWidth / croppedHeight;
  }

  return width / height;
}

const aspectRatio =
  aspectRatioProp === 'intrinsic' ? getAspectRatioForImage(image) : aspectRatioProp;

const objectPosition = image.hotspot
  ? `${image.hotspot.x * 100}% ${image.hotspot.y * 100}%`
  : undefined;
---

<img
  alt={'alt' in image ? image.alt ?? '' : ''}
  class:list={[Astro.props.class]}
  sizes={sizes}
  srcset={srcset}
  src={src}
  loading={loading}
  decoding="async"
/>

<style lang="scss" define:vars={{ aspectRatio, objectFit, objectPosition }}>
  img {
    width: 100%;
    object-fit: var(--objectFit);
    object-position: var(--objectPosition);
    aspect-ratio: var(--aspectRatio);
  }
</style>
